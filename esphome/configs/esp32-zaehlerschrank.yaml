esphome:
  name: esp32-zaehlerschrank
  friendly_name: esp32-zaehlerschrank

esp32:
  board: wemos_d1_mini32
  framework: 
    type: esp-idf

logger:
  # disable serial logging
  baud_rate: 0
  logs:
    sml: INFO
    canbus: INFO
    #isotp: INFO
    uds: INFO
    text_sensor: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password
  platform: esphome


### ENTWEDER WIFI
#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Esp32-Zaehlerschrank"
#    password: "vSHIFf9r2JOv"

#captive_portal:

### ODER ETHERNET
ethernet:
  type: W5500
  clk_pin: GPIO18
  miso_pin: GPIO19
  mosi_pin: GPIO23
  cs_pin: GPIO05


# One Wire Configuration
one_wire:
  - platform: gpio
    pin: GPIO26

uart:
- id: uart_0  
  tx_pin: GPIO01 ## verkehrt herum
  rx_pin: GPIO03
  baud_rate: 9600
- id: uart_2
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);



sml:
- id: hausanschluss
  uart_id: uart_0
- id: wechselrichter
  uart_id: uart_2

    

sensor:
- platform: template
  name: "Aussengerät Zulauf Temperatur 268"
  id: vc268
  unit_of_measurement: °C
  device_class: temperature
  state_class: "measurement"
  accuracy_decimals: 1
  filters:
  - delta: 0.01
  - heartbeat: 300s

- platform: template
  name: "Aussengerät Rücklauf Temperatur 269"
  id: vc269
  unit_of_measurement: °C
  device_class: temperature
  state_class: "measurement"
  accuracy_decimals: 1
  filters:
  - delta: 0.01
  - heartbeat: 300s

- platform: template
  name: "Warmwasser Speicher Temperatur 271"
  id: vc271
  unit_of_measurement: °C
  device_class: temperature
  state_class: "measurement"
  accuracy_decimals: 1
  filters:
  - delta: 0.01
  - heartbeat: 300s

- platform: template
  name: "Anlagendruck 318"
  id: vc318
  unit_of_measurement: bar
  device_class: pressure
  state_class: "measurement"
  accuracy_decimals: 1
  filters:
  - delta: 0.01
  - heartbeat: 300s

- platform: template
  name: "Zentrale Heizungspumpe Status 381"
  id: vc381
  state_class: "measurement"
  accuracy_decimals: 0
  filters:
  - delta: 0.01
  - heartbeat: 300s

- platform: template
  name: "Anzahl Starts Verdichter 2369"
  id: vc2369_starts
  state_class: "measurement"
  accuracy_decimals: 0
#  filters:
#  - delta: 0.01
#  - heartbeat: 300s

- platform: template
  name: "Betriebsstunden Verdichter 2369"
  id: vc2369_hours
  state_class: "measurement"
  device_class: duration
  unit_of_measurement: hours
  accuracy_decimals: 0
#  filters:
#  - delta: 0.01
#  - heartbeat: 300s

- platform: template
  name: "Anzahl Starts Heizwasserdurchlauferhitzer 2370"
  id: vc2370_starts
  state_class: "measurement"
  accuracy_decimals: 0
#  filters:
#  - delta: 0.01
#  - heartbeat: 300s

- platform: template
  name: "Betriebsstunden Heizwasserdurchlauferhitzer 2370"
  id: vc2370_hours
  state_class: "measurement"
  device_class: duration
  unit_of_measurement: hours
  accuracy_decimals: 0
#  filters:
#  - delta: 0.01
#  - heartbeat: 300s

- platform: template
  name: "Puffer Speicher Mid Temperatur 279"
  id: vc279
  unit_of_measurement: °C
  device_class: temperature
  state_class: "measurement"
  accuracy_decimals: 1

- platform: template
  name: "Hydraulische Weiche Temperatur 282"
  id: vc282
  unit_of_measurement: °C
  device_class: temperature
  state_class: "measurement"
  accuracy_decimals: 1

- platform: template
  name: "Zirkulationspumpe Status 491"
  id: vc491
  state_class: "measurement"
  accuracy_decimals: 0

### Volumenstrom
### Status Verdichter
### Status SG Ready 
### Status Heizwasserdurchlauferhitzer
### Temperatur Pufferspeicher
### Heizkörper Vorlauftemperatur
### Status Heizkörper Heizkreispumpe
### FBH Vorlauftemperatur
### Status FBH Heizkreispumpe

- platform: dallas_temp
  address: 0x4b01211292b2ac28
  name: "Vorlauf Fußboden"
  filters:
  - delta: 0.1
  - heartbeat: 300s
- platform: dallas_temp
  address: 0xe10121124baf6d28
  name: "Rücklauf Fußboden"
  filters:
  - delta: 0.1
  - heartbeat: 300s
- platform: dallas_temp
  address: 0x6c012112a1368b28
  name: "Rücklauf Heizkörper"
  filters:
  - delta: 0.1
  - heartbeat: 300s
- platform: dallas_temp
  address: 0xfb0121129dc07c28
  name: "Vorlauf Heizkörper"
  filters:
  - delta: 0.1
  - heartbeat: 300s
- platform: sml
  name: "Bezug"
  sml_id: hausanschluss
  obis_code: "1-0:1.8.0"
  unit_of_measurement: kWh
  device_class: energy
  state_class: total_increasing
  filters:
  - delta: 0.1
  - heartbeat: 300s
- platform: sml
  name: "Einspeisung"
  sml_id: hausanschluss
  obis_code: "1-0:2.8.0"
  unit_of_measurement: kWh
  device_class: energy
  state_class: total_increasing
  filters:
  - delta: 0.1
  - heartbeat: 300s




### Viessmann VitoCal CAN Bus Query Implementation, based on
### https://www.csselectronics.com/pages/uds-protocol-tutorial-unified-diagnostic-services
### https://github.com/open3e/open3e/blob/master/src/open3e/Open3Edatapoints.py
### https://github.com/maromme/esphome-vitoair
text_sensor:
- id: uds_318
  internal: true
  platform: template
  on_value:
      then:
        - lambda: 'id(vc318).publish_state(float((((uint16_t) x[1]) << 8) | x[0]) * 0.1);'
- id: uds_268
  internal: true
  platform: template
  on_value:
      then:
        - lambda: 'id(vc268).publish_state(float((((uint16_t) x[1]) << 8) | x[0]) * 0.1);'
- id: uds_269
  internal: true
  platform: template
  on_value:
      then:
        - lambda: 'id(vc269).publish_state(float((((uint16_t) x[1]) << 8) | x[0]) * 0.1);'
- id: uds_271
  internal: true
  platform: template
  on_value:
      then:
        - lambda: 'id(vc271).publish_state(float((((uint16_t) x[1]) << 8) | x[0]) * 0.1);'
- id: uds_279
  internal: true
  platform: template
  on_value:
      then:
        - lambda: 'id(vc279).publish_state(float((((uint16_t) x[1]) << 8) | x[0]) * 0.1);'
- id: uds_381
  internal: true
  platform: template
  on_value:
    then:
      - lambda: 'id(vc381).publish_state(float(x[1]));'
- id: uds_491
  internal: true
  platform: template
  on_value:
    then:
      - lambda: 'id(vc491).publish_state(float(x[0]));'
          
- id: uds_2369
  internal: true
  platform: template
  on_value:
    then:
      - lambda: |-
          id(vc2369_starts).publish_state( float( (((uint16_t) x[7]) << 8) | x[6] ) ); 
          id(vc2369_hours).publish_state( float( (((uint16_t) x[11]) << 8) | x[10] ) );
- id: uds_2370
  internal: true
  platform: template
  on_value:
    then:
      - lambda: |-
          id(vc2370_starts).publish_state( float( (((uint16_t) x[7]) << 8) | x[6] ) ); 
          id(vc2370_hours).publish_state( float( (((uint16_t) x[11]) << 8) | x[10] ) );



globals:
- id: text_sensors_representing_dids
  type: std::vector<esphome::text_sensor::TextSensor>
  restore_value: no
  initial_value: '{id(uds_318), id(uds_279), id(uds_491), id(uds_2370), id(uds_2369), id(uds_381), id(uds_268), id(uds_269), id(uds_271)}'
- id: can_target_address
  type: int
  restore_value: no
  initial_value: '0x680' 
- id: isotp_current_dataframe
  type: std::vector<uint8_t>
  restore_value: no
  initial_value: '{0}'
- id: isotp_current_dataframe_length
  type: uint16_t
  restore_value: no
  initial_value: '0'
- id: current_did_index
  type: int
  restore_value: no
  initial_value: '0' 

## the stuff below should not need reconfiguration

interval:
- interval: 10s # query one DID every X seconds
  then:
    - lambda: |-
        int did = std::stoi(id(text_sensors_representing_dids)[id(current_did_index)].get_object_id().substr(4,12));
        ESP_LOGD("uds", "query UDS DID %d",  did);
        id(uds_did_request)->execute(did);
        if (++id(current_did_index) >= id(text_sensors_representing_dids).size()) { 
            id(current_did_index) = 0;
        }

canbus:
  - platform: esp32_can
    tx_pin: GPIO21
    rx_pin: GPIO22
    can_id: 0x680
    id: cb
    bit_rate: 250KBPS
    on_frame:
      - can_id: 0x690
        then:
          - lambda: |-
              ESP_LOGD("isotp", "received: 0x%02X %02X %02X %02X %02X %02X %02X %02X", x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]);

              //ISO-TP protocol handling
              switch (x[0] >> 4) {

                  case 0: { // single frame
                      id(isotp_current_dataframe_length) = x[0] & 0x0f;
                      id(isotp_current_dataframe).reserve(id(isotp_current_dataframe_length));
                      id(isotp_current_dataframe).clear();
                      for (int i=1; i<=id(isotp_current_dataframe_length); i++) { // first byte is ISO-TS PCI
                        id(isotp_current_dataframe).push_back(x[i]);
                      }
                      id(isotp_frame_received)->execute();

                      break;
                  }
                  case 1: { // first frame (of multiple)
                      id(isotp_current_dataframe_length) = (( (uint16_t) (x[0] & 0x0f) ) << 8) + ((uint16_t)x[1]);
                      ESP_LOGD("isotp", "dataframe length %d", id(isotp_current_dataframe_length));
                      id(isotp_current_dataframe).reserve(id(isotp_current_dataframe_length));
                      id(isotp_current_dataframe).clear();
                      for (int i=2; i<8; i++) { // first two bytes are ISO-TS PCI, len always exceeds the 8 byte packet, this is why we push all bytes in packet
                        id(isotp_current_dataframe).push_back(x[i]);
                      }
                      
                      // 0x30: ISO-TP Protocol Control Information (PCI) high nibble: PCI Flow Control, low nibble: "Continue to Send" (0x0)
                      // 0x00: send remaining frames without flow control or delay
                      // 0x00: minimum consecutive frame separation time (ST) 0
                      // 0xAA 0xAA 0xAA 0xAA 0xAA: Padding
                      std::vector< uint8_t > data0{ 0x30, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA ,0xAA };
                      ESP_LOGD("isotp", "sent: 0x%02X %02X %02X %02X %02X %02X %02X %02X", data0[0], data0[1], data0[2], data0[3], data0[4], data0[5], data0[6], data0[7]);
                      id(cb)->send_data(id(can_target_address), 0, data0);

                      break;
                  }
                  case 2: { // consecutive frame (of multiple)
                      uint16_t pos = (((uint16_t) x[0] & 0x0f) - 1) * 7 + 6;
                      uint16_t end = pos;

                      ESP_LOGD("isotp", "received data at position %d for a dataframe length of %d", pos, id(isotp_current_dataframe_length));

                      for (int i=1; i<8 && end<id(isotp_current_dataframe_length) ; i++, end++) { // first byte is ISO-TS PCI
                        id(isotp_current_dataframe).push_back(x[i]);
                      }

                      // if this datagram completes the indicated frame size
                      ESP_LOGD("isotp", "received %d bytes of a %d byte frame", end, id(isotp_current_dataframe_length));
                      if (end >=  id(isotp_current_dataframe_length)) {
                        id(isotp_frame_received)->execute();
                      }
                      break;
                  }
                  default: // ignore flow control frame and others
                      break;
              }

script:
- id: uds_did_request
  parameters:
    did: int
  then:
    lambda: |-
        // 0x03: ISO-TP Protocol Control Information (PCI) high nibble: PCI single frame, low nibble: 3 bytes length
        // 0x22: Service Identifier (SID): Unified Diagnistics Service Data Read Request
        // 0x?? 0x??: Data Identifier (DID): The value in question
        // 0xAA 0xAA 0xAA 0xAA: Padding
        std::vector< uint8_t > x{ 0x03, 0x22, (uint8_t) (did >> 8), (uint8_t) (did & 0x00ff), 0xAA, 0xAA, 0xAA, 0xAA };
        ESP_LOGD("isotp", "sent: 0x%02X %02X %02X %02X %02X %02X %02X %02X", x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]);
        id(cb)->send_data(id(can_target_address), 0, x);
- id: isotp_frame_received
  then:
    - lambda: |-
        if (id(isotp_current_dataframe)[0] == 0x62) { // SID UDS data read response (0x22 + 0x40)
          id(uds_did_response_received)->execute();
        }
- id: uds_did_response_received
  then:
    - lambda: |-
        uint16_t did = (((uint16_t)id(isotp_current_dataframe)[1]) << 8) | ((uint16_t)id(isotp_current_dataframe)[2]);
        uint16_t len = id(isotp_current_dataframe).size();
        std::string text(id(isotp_current_dataframe).begin() + 3, id(isotp_current_dataframe).end());

        ESP_LOGD("uds", "received DID %04X length %d", did, len);

        // identify internal text sensor belonging to DID
        for (esphome::text_sensor::TextSensor &ts : id( text_sensors_representing_dids )) {
            int sensor_did = std::stoi(ts.get_object_id().substr(4,12));

            if (did == sensor_did) {
                ESP_LOGD("uds", "found sensor %s", ts.get_object_id().c_str());
                ts.publish_state(text);
                break;
            }
        }